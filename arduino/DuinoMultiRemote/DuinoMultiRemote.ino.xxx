//------------------------------------------------------------//
// Arduino's sketch for S.A.R.A.H's plugin "DuinoMultiRemote" //
//------------------------------------------------------------//
#include <LiquidCrystal.h>

/* Pin's settings */
//-- LCD Display --
const int RS          = 7; 
const int E           = 8; 
const int D4          = 10; 
const int D5          = 11; 
const int D6          = 12; 
const int D7          = 13; 
//-- RGB LED --
const int redPin      = 9;
const int greenPin    = 5;
const int bluePin     = 6;
//-- LED --
const int ledPin      = 3; 
//-- SWITCH --
const int buttonPin   = 2;
//-- POTENTIOMETER --
const int potPin      = A0;

/* Variables Values */
//--RGB LED --
int redRGB            = 255;
int greenRGB          = 255;
int blueRGB           = 255;
int rgbState          = 1;
//-- LED --
int ledVal            = 255;
int ledState          = 1;
//-- SWITCH --
int buttonState       = HIGH;
int buttonPushCounter = 0;
//-- POTENTIOMETER --
int potValue          = 255;
int lastPotValue      = 255;
int mapPotValue       = 0;
//-- VARIOUS --
String myString;
byte car;
char buffer1[16];
char buffer2[16];
//-- Init
LiquidCrystal lcd(RS, E, D4, D5, D6, D7);

const int numReadings = 50;

int readings[numReadings];      // the readings from the analog input
int index = 0;                  // the index of the current reading
int total = 0;                  // the running total
int average = 0;                // the average

int inputPin = A0;


void setup() {
  Serial.begin(9600);
  // RGB LED
  pinMode (redPin, OUTPUT);
  pinMode (greenPin, OUTPUT);
  pinMode (bluePin, OUTPUT);
  // LED
  pinMode (ledPin, OUTPUT);
  digitalWrite (ledPin, HIGH);
  // SWITCH
  pinMode (buttonPin, INPUT);
  // POT
  pinMode (potPin, INPUT);
  // Print a message to the LCD.
  lcd.begin(16, 2);
  lcd.setCursor(0,0);
  lcd.print("DuinoMultiRemote");
  lcd.setCursor(0,1);
  lcd.print("     Ready!     "); 

    for (int thisReading = 0; thisReading < numReadings; thisReading++)
     readings[thisReading] = 0;          

}

void loop() {

  //-- SWITCH --
  if (digitalRead (buttonPin) == HIGH){
    while (digitalRead(buttonPin) != LOW);
    buttonState = !buttonState;
    switching(buttonState);
    printAll();
  }

  //-- POT --
   total= total - readings[index];         
   readings[index] = analogRead(potPin); 
   total= total + readings[index];       
   index = index + 1;                    
   if (index >= numReadings)              
    index = 0;                           
   mapPotValue = total / numReadings;         
   delay(1);        // delay in between reads for stability            

  /* SERIAL input datas (S.A.R.A.H's requests) */
  while (Serial.available() > 0) {
    car = Serial.read();
    switch (car) {
      //-- Switch ON/OFF --//
      case 'S':
        Serial.readStringUntil ('\n');
        buttonState = !buttonState;
        switching (buttonState);
      break;
      //-- RGB LED values --//
      case 'R':
        redRGB   = Serial.parseInt();
        greenRGB = Serial.parseInt();
        blueRGB  = Serial.parseInt();
        rgbState = Serial.parseInt();
        if (Serial.read() == '\n' && rgbState == 1) {
          analogWrite (redPin, redRGB);
          analogWrite (greenPin, greenRGB);
          analogWrite (bluePin, blueRGB);
        } else {
          analogWrite (redPin, 0);
          analogWrite (greenPin, 0);
          analogWrite (bluePin, 0);
        }
      break;
      //-- LED values --//
      case 'L':
        ledVal   = Serial.parseInt();
        ledState = Serial.parseInt();
        Serial.read() == '\n' && ledState == 1 ? analogWrite (ledPin, ledVal) : analogWrite(ledPin, 0);
        //Serial.read() == '\n' ? analogWrite (ledPin, ledState == 1 ? ledVal : 0) : '';
      break;
      //-- Asking Arduino's data's --//
      case '?':
      break;
      //-- Unknown's requests --//
      default:
      return;
    }
    printAll();
  }
}

/* Serial output (print) function */
void printAll() {
  if (buttonState == HIGH ) {
    ledState == 0 ? sprintf(buffer2, "LED(OFF)POT(%d)",potValue) : sprintf(buffer2, "LED(%d)POT(%d)", ledVal, potValue);
    rgbState == 0 ? sprintf(buffer1, "RGB(OFF)") : sprintf(buffer1, "RGB(%d,%d,%d)", redRGB,greenRGB,blueRGB);
  } else {
    sprintf(buffer2,"      OFF       ");
    sprintf(buffer1,"DuinoMultiRemote");
  }
  lcd.clear();
  //lcd.begin(16, 2);
  lcd.setCursor(0,0);
  lcd.print(buffer1);
  lcd.setCursor(0,1);
  lcd.print(buffer2);
  myString  = "S" + String (buttonState);
  myString += "C" + String (buttonPushCounter);
  myString += "P" + String (potValue, DEC);
  myString += "R" + String (redRGB, DEC) + "G" + String (greenRGB, DEC) + "B" + String (blueRGB, DEC);
  myString += "X" + String (rgbState);
  myString += "L" + String (ledVal, DEC);
  myString += "Y" + String (ledState);
  Serial.println (myString);
}

/* Switch state & settings function */
void switching (int state) {
  if (state == HIGH) {
    // Increase Cycles
    buttonPushCounter++;
    // Set RGB LED values
    analogWrite(redPin, redRGB);
    analogWrite(greenPin, greenRGB);
    analogWrite(bluePin, blueRGB);
    rgbState = 1;
    // Set LED dim (= POT value)
    analogWrite(ledPin, ledVal);//srcPot <= 5 ? potValue : ledVal);
    ledState = 1;
  } else {
    // Disable RGB LED
    analogWrite(redPin, 0);
    analogWrite(greenPin, 0);
    analogWrite(bluePin, 0);
    rgbState=0;
    // Disable LED
    analogWrite(ledPin, 0);
    ledState=0;
  }
}
